#!/usr/bin/env python3

"""
    Python module containing NITA CLI commands and help.
"""

from nita_cli import cli as cli

# COMMANDS TREE
COMMANDS = {
    'nita': {
        'cli': {
            'version': "echo NITA CLI telenor branch - $(pip3 list | grep nita-cli | awk '{print $2}')",
        },
        'up'      : 'docker-compose --compatibility -f nita-core.yml up -d',
        'down'    : 'docker-compose --compatibility -f nita-core.yml down',
        'start'   : 'docker-compose --compatibility -f nita-core.yml start',
        'stop'    : 'docker-compose --compatibility -f nita-core.yml stop',
        'status'  : 'docker-compose --compatibility -f nita-core.yml ps',
        'core': {
            'up'      : 'docker-compose --compatibility -f nita-core.yml up -d',
            'down'    : 'docker-compose --compatibility -f nita-core.yml down',
            'start'   : 'docker-compose --compatibility -f nita-core.yml start',
            'stop'    : 'docker-compose --compatibility -f nita-core.yml stop',
            'restart' : 'docker-compose --compatibility -f nita-core.yml restart',
            'status'  : 'docker-compose --compatibility -f nita-core.yml ps',
        },
        'new': {
            'project': 'mkdir -p {0}/build {0}/doc {0}/group_vars {0}/host_vars {0}/jenkins {0}/noob {0}/roles {0}/test/configs {0}/test/libraries {0}/test/outputs {0}/test/resource_files {0}/test/scripts {0}/test/suites/config {0}/test/suites/monitor {0}/test/suites/verify {0}/test/templates {0}/test/variables_file',
            'role'   : 'mkdir -p {0}/defaults {0}/files {0}/handlers {0}/meta {0}/tasks {0}/templates {0}/vars ',
        },
        'containers': {
            'ls'      : 'docker ps --filter "label=net.juniper.framework=NITA" --format "table {{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"',
            'versions': 'docker ps -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format "{{ .Name }} - {{ index .Config.Labels \\"net.juniper.image.release\\"}}"',
        },
        'images': {
            'ls'      : 'docker images --filter "label=net.juniper.framework=NITA"',
            'versions': 'docker images -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format "{{ .RepoTags }} - {{ index .Config.Labels \\"net.juniper.image.release\\"}}"',
        },
        'inventory': {
            'create'  : 'docker run -d -p 15984:5984 --name inventory -it couchdb:2.3.1',
            'populate': 'cd couchdb/ ; sh make_couch.sh ; cd ..',
            'gui'     : 'open http://localhost:15984/_utils/#/_all_dbs',
        },
        'ips'  : 'docker ps -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format \'{{ .Name }} - {{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\'',
        'stats': 'docker stats --no-stream $(docker ps -q --filter "label=net.juniper.framework=NITA" --format={{.Names}})',
        'jenkins': {
            'version'   : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ version',
            'jobs': {
                'whoami'   : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ who-am-i',
                'ls'       : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ list-jobs | tail -n+3 ',
                'delete'   : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ delete-job {1}',
                'enable'   : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ enable-job {1}',
                'disable'  : 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ disable-job {1}',
                'create'   : "cat {1}.xml | docker exec -i jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ create-job {1}",
                'get'      : "docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ get-job {1} | tail -n+3 ",
            },
            'plugins': {
                'ls'     : "docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ list-plugins | awk '{print $1\":\"$NF}' | sort | tail -n+3 ",
                'details': 'docker exec -it jenkins /usr/local/openjdk-8/bin/java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -noCertificateCheck -s https://admin:admin@jenkins:8443/ list-plugins | sort | tail -n+3 ',
            },
            'set': {
                'verify': {
                    'ssl': {
                        'true' : 'docker exec -it jenkins git config --global http.sslVerify true',
                        'false': 'docker exec -it jenkins git config --global http.sslVerify false',
                    },
                },
                'matrix': {
                    'authentication' : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_Matrix/build',
                },
            },
            'labels':  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel jenkins """,
            'cli': {
                'jenkins': 'docker exec -it -u jenkins jenkins /bin/bash',
                'root'   : 'docker exec -it -u root jenkins /bin/bash',
            },
            'gui'    : 'open https://jenkins.nita.com:8443',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' jenkins',
            'ports'  : 'docker port jenkins',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' jenkins | jq',
            'logs'   : 'docker logs -f jenkins --tail 200',
            'restart': 'docker-compose --compatibility -f nita-core.yml restart jenkins',
            'start'  : 'docker-compose --compatibility -f nita-core.yml start jenkins',
            'stop'   : 'docker-compose --compatibility -f nita-core.yml stop jenkins',
            'rm'     : 'docker-compose --compatibility -f nita-core.yml rm -f jenkins',
            'up'     : 'docker-compose --compatibility -f nita-core.yml up -d jenkins',
            'down'   : 'nita jenkins stop ; nita jenkins rm',
        },
        'ansible': {
            'run': {
                'noob' : {
                    'console': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/noob.pb.yaml',
                    'gui' :    'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_NOOB/build',
                },
                'build': {
                    'console': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/build.pb.yaml',
                    'gui':     'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_Build/build',
                },
            },
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' ansible | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; docker run --rm --name ansibletmp -itd ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 sleep 3 2>&1 > /dev/null ; containerlabel ansibletmp """,
            'cli':     'docker run -d --rm --name ansible -e VMM_USER=$VMM_USER -it --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 /bin/sh ; docker attach ansible',
        },
        'gitlab': {
            'labels':  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel ps-docker.artifactory.aslab.juniper.net/gitlab-ce:12.5.3-ce.0 """,
            'cli'    : 'docker exec -it -u root gitlab /bin/bash',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' gitlab',
            'ports'  : 'docker port gitlab',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' gitlab | jq',
            'logs'   : 'docker logs -f gitlab',
            'restart': 'docker-compose --compatibility -f nita-core.yml restart gitlab',
            'start'  : 'docker-compose --compatibility -f nita-core.yml start gitlab',
            'stop'   : 'docker-compose --compatibility -f nita-core.yml stop gitlab',
            'rm'     : 'docker-compose --compatibility -f nita-core.yml rm -f gitlab',
            'up'     : 'docker-compose --compatibility -f nita-core.yml up -d gitlab',
            'down'   : 'nita gitlab stop ; nita gitlab rm',
            'gui'    : 'open https://gitlab.nita.com',
        },
        'test': {
            'run': {
                'common': { 
                    'firewall' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:fw-vdc-001 /project/test/suites/common.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_FW_Common_Tests/build',
                    }, 
                    'switch' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:sw-vdc-001 /project/test/suites/common.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_SW_Common_Tests/build',
                    }, 
                    'router': {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/common.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_RX_Common_Tests/build',
                    },    
                },
                'specific' : 
                    {
                    'firewall' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:fw-vdc-001 /project/test/suites/firewalls.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_FW_Tests/build',
                        },
                    'switch'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:sw-vdc-001 /project/test/suites/switches.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_SW_Tests/build',
                        },
                    'router'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/routers.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_RX_Tests/build',
                        },
                    'tacacs'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/tacacs.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_TACACS_Tests/build',
                        },
                    'radius'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/radius.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_RADIUS_Tests/build',
                        },
                    'syslog'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/syslog.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_SYSLOG_Tests/build',
                        },
                    'dns'      : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/dns.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_DNS_Tests/build',
                        },
                    'ntp'      : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/ntp.robot',
                        'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_NTP_Tests/build',
                        },
                    # 'ospf'     : {
                    #     'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/ospf.robot',
                    #     'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_OSPF_Tests/build',
                    #     },
                    # 'bgp'      : {
                    #     'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/bgp.robot',
                    #     'gui'    : 'curl -k -X POST https://admin:admin@localhost:8443/job/vDC_BGP_Tests/build',
                    #     },
                    },                   
                },
            'pull': {
                'static'  : 'python3 inventory2toby.py --static',
                'dynamic' : 'python3 inventory2toby.py --dynamic',
                },
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' test | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; docker run --rm --name testtmp -itd ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 sleep 3 2>&1 > /dev/null ; containerlabel testtmp """,
            'cli':     'docker run -d --rm --name test -h toby --volumes-from jenkins -it -v %s:/project --entrypoint bash ps-docker.artifactory.aslab.juniper.net/toby:3.11.2 ; docker attach test',
        },
        'ping': {
            'all'       : 'for i in 2 3 4;  do ping -c 3 192.168.56.$i; done',
            'rx-vdc-001': 'ping -c 3 192.168.56.2',
            'sw-vdc-001': 'ping -c 3 192.168.56.3',
            'fw-vdc-001': 'ping -c 3 192.168.56.4',
        },
        'show': {
            'vms': 'VBoxManage list vms',
            'resources': {
                'rx-vdc-001': 'VBoxManage showvminfo "ROUTER-vMX" | egrep "Memory|CPUs"',
                'sw-vdc-001': 'VBoxManage showvminfo "SWITCH-vQFX-RE" | egrep "Memory|CPUs" ; VBoxManage showvminfo "SWITCH-vQFX-PFE" | egrep "Memory|CPUs"',
                'fw-vdc-001': 'VBoxManage showvminfo "FIREWALL-vSRX" | egrep "Memory|CPUs"',
            },
        },
        'backup': {
            'all'       : 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v ${PWD}:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/backup.pb.yaml --extra-vars "target=all"',
            'rx-vdc-001': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v ${PWD}:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/backup.pb.yaml --extra-vars "target=rx-vdc-001"',
            'sw-vdc-001': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v ${PWD}:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/backup.pb.yaml --extra-vars "target=sw-vdc-001"',
            'fw-vdc-001': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v ${PWD}:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ansible-playbook -i dynamic_inventory.py playbooks/backup.pb.yaml --extra-vars "target=fw-vdc-001"',
        },
        'license': 'echo "\n# <*******************\n#\n# Copyright 2016-2020 Juniper Networks, Inc. All rights reserved.\n# Licensed under the Juniper Networks Script Software License (the "License").\n# You may not use this script file except in compliance with the License, which is located at\n# http://www.juniper.net/support/legal/scriptlicense/\n# Unless required by applicable law or otherwise agreed to in writing by the parties, software\n# distributed under the License is distributed on an "AS IS" BASIS, \n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#\n# *******************>"\n',
    },
}

# HELP TREE
HELP = {
    'nita': {
        'cli': {
            'version': 'Shows NITA CLI current version.',
        },
        'up'    :   'Creates and starts NITA containers (both Core and CaaS).',
        'down'  :   'Stops and removes NITA containers (both Core and CaaS).',
        'start' :   'Starts NITA containers (both Core and CaaS).',
        'stop'  :   'Stops NITA containers (both Core and CaaS).',
        'status':   'Shows the status of every NITA containers.',
        'core': {
            'up'     : 'Creates and starts Core NITA containers.',
            'down'   : 'Stops and removes Core NITA containers.',
            'start'  : 'Starts Core NITA containers.',
            'stop'   : 'Stops Core NITA containers.',
            'restart': 'Restarts Core NITA containers.',
            'status' : 'Shows the status of Core NITA containers.',
        },
        'new': {
            'project': 'Creates a new NITA project scaffolding.',
            'role'   : 'Creates a new Ansible role scaffolding.',
        },
        'containers': {
            'ls'      : 'Lists all running NITA containers.',
            'versions': 'Lists all running NITA containers versions.',
        },
        'images': {
            'ls'      : 'Lists all NITA images.',
            'versions': 'Displays NITA images versions.',
        },
        'inventory': {
            'create'  : 'Creates a new 3rd-party virtual DC dynamic inventory in a couchDB container.',
            'populate': 'Populates virtual DC dynamic inventory with data related to NITA demo.',
            'gui'     : 'Opens CouchDB inventory GUI.',
        },
        'ips'  : 'Shows all NITA containers IPs.',
        'stats': 'Displays NITA containers runtime metrics [CPU %, MEM USAGE / LIMIT, MEM %, NET I/O, BLOCK I/O, PIDS].',
        'jenkins': {
            'version'   : 'Gets Jenkins server version.',
            'jobs': {
                'whoami'   : 'Reports your credential and permissions.',
                'ls'       : 'Lists all Jenkins jobs.',
                'delete'   : 'Deletes an existing job matched by --job <JOB>',
                'enable'   : 'Enables an existing job matched by --job <JOB>',
                'disable'  : 'Disables an existing job matched by --job <JOB>',
                'create'   : 'Creates a new job by reading stdin as a configuration XML file (--file example.xml).',
                'get'      : 'Dumps an existing job definition XML matched by --job <JOB> to stdout.',
            },
            'plugins': {
                'ls'     : 'Lists every Jenkins plugins installed sorted alphabetically.',
                'details': 'Lists every Jenkins plugins installed in detail (i.e name, version, active, enable, url).'
            },
            'set': {
                'verify': {
                    'ssl': {
                        'true' : 'Enables SSL certificate validation.',
                        'false': 'Disables SSL certificate validation.',
                    },
                },
                'matrix': {
                    'authentication' : 'Sets matrix-based security authorization strategy.',
                },
            },
            'labels':  'Returns labels information on jenkins container.',
            'cli': {
                'jenkins': 'Attaches local standard input, output and error streams to jenkins running container with "jenkins" user.',
                'root'   : 'Attaches local standard input, output and error streams to jenkins running container with "root" user.',
            },
            'gui'    : 'Opens Jenkins GUI.',
            'ip'     : 'Returns IPs information on jenkins container.',
            'ports'  : 'Returns mapped ports information on jenkins container.',
            'volumes': 'Returns shared volumes information on jenkins container.',
            'logs'   : 'Follows log output of jenkins container.',
            'restart': 'Restarts jenkins container.',
            'start'  : 'Starts jenkins container.',
            'stop'   : 'Stops jenkins container.',
            'rm'     : 'Removes jenkins container.',
            'up'     : 'Creates and starts jenkins container.',
            'down'   : 'Stops and removes jenkins container.',
        },
        'ansible': {
            'run': {
                'noob' : {
                    'console': 'Runs NOOB process and writes its output to console.',
                    'gui'    : 'Triggers NOOB Jenkins job.',
                }, 
                'build': {
                    'console': 'Runs BUILD process and writes its output to console.',
                    'gui'    : 'Triggers BUILD Jenkins job.',
                },
            },
            'volumes': 'Returns shared volumes information on ansible container.',
            'labels' : 'Returns labels information on ansible container.',
            'cli'    : 'Attaches local standard input, output and error streams to ansible running container.',
        },
        'gitlab': {
            'labels' : 'Returns labels information on gitlab container.',
            'cli'    : 'Attaches local standard input, output and error streams to gitlab running container with "root" user.',
            'ip'     : 'Returns IPs information on gitlab container.',
            'ports'  : 'Returns mapped ports information on gitlab container.',
            'volumes': 'Returns shared volumes information on gitlab container.',
            'logs'   : 'Fetches the logs of gitlab container.',
            'restart': 'Restarts gitlab container.',
            'start'  : 'Starts gitlab container.',
            'stop'   : 'Stops gitlab container.',
            'rm'     : 'Removes gitlab container.',
            'up'     : 'Creates and starts gitlab container.',
            'down'   : 'Stops and removes gitlab container.',
            'gui'    : 'Opens GitLab GUI.',
        },
        'test': {
            'run': {
                'common': {
                    'firewall': {
                        'console': 'Executes common test suite on firewall and writes its output to console.',
                        'gui'    : 'Triggers vDC_FW_Common_Tests Jenkins job.',
                    },
                    'switch'  : {
                        'console': 'Executes common test suite on switch and writes its output to console.',
                        'gui'    : 'Triggers vDC_SW_Common_Tests Jenkins job.',
                    },
                    'router'  : {
                        'console': 'Executes common test suite on router and writes its output to console.',
                        'gui'    : 'Triggers vDC_RX_Common_Tests Jenkins job.',
                    },
                },
                'specific' : { 
                    'firewall' : {
                        'console': 'Executes specific firewall tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_FW_Tests Jenkins job.',
                    },
                    'switch'   : {
                        'console': 'Executes specific switch tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_SW_Tests Jenkins job.',
                    },
                    'router'   : {
                        'console': 'Executes specific router tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_RX_Tests Jenkins job.',
                    },
                    'tacacs'   : {
                        'console': 'Executes specific TACACS tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_TACACS_Tests Jenkins job.',
                    },
                    'radius'   : {
                        'console': 'Executes specific RADIUS tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_RADIUS_Tests Jenkins job.',
                    },
                    'syslog'   : {
                        'console': 'Executes specific SYSLOG tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_SYSLOG_Tests Jenkins job.',
                    },
                    'dns'      : {
                        'console': 'Executes specific DNS tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_DNS_Tests Jenkins job.',
                    },
                    'ntp'      : {
                        'console': 'Executes specific NTP tests and writes its output to console.',
                        'gui'    : 'Triggers vDC_NTP_Tests Jenkins job.',
                    },
                    # 'ospf'     : {
                    #     'console': 'Executes specific OSPF tests and writes its output to console.',
                    #     'gui'    : 'Triggers vDC_OSPF_Tests Jenkins job.',
                    # },
                    # 'bgp'      : {
                    #     'console': 'Executes specific BGP tests and writes its output to console.',
                    #     'gui'    : 'Triggers vDC_BGP_Tests Jenkins job.',
                    # },
                },
            },
            'pull': {
                'static' : 'Creates topology object from static inventory.',
                'dynamic': 'Creates topology object from dynamic inventory.',
            },
            'volumes': 'Returns shared volumes information on test container.',
            'labels' : 'Returns labels information on test container.',
            'cli'    : 'Attaches local standard input, output and error streams to test running container.',
        },
        'ping': {
            'all'       : 'Pings all devices of the virtual DC.',
            'rx-vdc-001': 'Pings rx-vdc-001 device.',
            'sw-vdc-001': 'Pings sw-vdc-001 device.',
            'fw-vdc-001': 'Pings fw-vdc-001 device.',
        },
        'show': {
            'vms': 'Lists virtual DC VMs',
            'resources': {
                'rx-vdc-001': 'Shows rx-vdc-001 resources (Memory & CPU)',
                'sw-vdc-001': 'Shows sw-vdc-001 resources (Memory & CPU)',
                'fw-vdc-001': 'Shows fw-vdc-001 resources (Memory & CPU)',
            },
        },
        'backup': {
            'all'       : 'Creates a backup of all devices configurations of the virtual DC.',
            'rx-vdc-001': 'Creates a backup of rx-vdc-001 device.',
            'sw-vdc-001': 'Creates a backup of sw-vdc-001 device.',
            'fw-vdc-001': 'Creates a backup of fw-vdc-001 device.',
        },
        'license': 'Displays the NITA License.',
    },
}

if __name__ == '__main__':
    cli.main(COMMANDS, HELP)
