#!/usr/bin/env python3

"""
    Python module containing NITA CLI commands and help.
"""

from nita_cli import cli as cli

# COMMANDS TREE
COMMANDS = {
    'nita': {
        'cli': {
            'version': "echo NITA CLI master branch - $(pip3 list | grep nita-cli | awk '{print $2}')",
        },
        'setup': {
            'environment': 'echo "" ; oPS3=$PS3 ; PS3="\nPlease choose an environment: "; select env in laptop VMM ; do case $REPLY in "1") ./setup_demo.sh ; break ;; "2") echo "\nDeprecated! Sorry...\n" ; break ;; *) echo "\nThat is not a valid option!\n" ; break ;; esac; done ; PS3=$oPS3',
            'all': 'nita setup environment ; nita demo laptop ; '
        },
        'destroy': {
            'environment': 'echo "" ; oPS3=$PS3 ; PS3="\nPlease choose an environment: "; select env in laptop VMM ; do case $REPLY in "1") ./destroy_demo.sh ; break ;; "2") echo "\nDeprecated! Sorry...\n" ; break ;; *) echo "\nThat is not a valid option!\n" ; break ;; esac; done ; PS3=$oPS3',
        },
        'up'  :     'docker-compose -f nita-core.yml -f nita-caas.yml up -d',
        'down':     'docker-compose -f nita-core.yml -f nita-caas.yml down',
        'start':    'docker-compose -f nita-core.yml -f nita-caas.yml start',
        'stop':     'docker-compose -f nita-core.yml -f nita-caas.yml stop',
        'status':   'docker-compose -f nita-core.yml -f nita-caas.yml ps',
        'demo': {
            'vmm'   : 'nita -d inventory create ; \
                       sleep 10 ; \
                       nita -d inventory populate ; \
                       sleep 60 ; nita -d ansible run noob console ; \
                       sleep 60 ; \
                       nita -d ansible run build console ; \
                       nita -d test pull dynamic ; \
                       sleep 10 ; \
                       nita -d test run common router console ; \
                       sleep 10 ; \
                       nita -d test run common firewall console ; \
                       sleep 10 ; \
                       nita -d test run common switch console ; \
                       sleep 10 ; \
                       nita -d test run specific dns console ; \
                       nita -d test run specific ntp console ; \
                       nita -d test run specific syslog console ; \
                       nita -d test run specific tacacs console ; \
                       nita -d test run specific radius console ; \
                       echo " \n# IMAGE VERSIONS #\n" ; \
                       nita images versions ; \
                       echo " \n# CONTAINER VERSIONS #\n" ; \
                       nita containers versions ; \
                       echo " \n# NITA CLI VERSION #\n" ; \
                       nita cli version ; echo ""',
            # laptop demo has NTP test removed
            'laptop': 'nita -d inventory create ; \
                        sleep 10 ; \
                        nita -d inventory populate ; \
                        sleep 10 ; \
                        nita -d ansible run noob console ; \
                        sleep 5  ; \
                        nita -d ansible run build console ; \
                        nita -d test pull dynamic ; \
                        sleep 5  ; \
                        nita -d test run common router console ; \
                        sleep 5  ; \
                        nita -d test run common firewall console ; \
                        sleep 5  ; \
                        nita -d test run common switch console ; \
                        sleep 10 ; \
                        nita -d test run specific dns console ; \
                        nita -d test run specific syslog console ; \
                        nita -d test run specific tacacs console ; \
                        nita -d test run specific radius console ; \
                        nita -d test run specific router console ; \
                        nita -d test run specific firewall console ; \
                        nita -d test run specific switch console ; \
                        echo " \n# IMAGE VERSIONS #\n" ; \
                        nita images versions ; \
                        echo " \n# CONTAINER VERSIONS #\n" ; \
                        nita containers versions ; \
                        echo " \n# NITA CLI VERSION #\n" ; \
                        nita cli version ; echo ""',
        },    
        'new': {
            'project': 'mkdir -p {0}/build {0}/doc {0}/group_vars {0}/host_vars {0}/jenkins {0}/noob {0}/roles {0}/test/configs {0}/test/libraries {0}/test/outputs {0}/test/resource_files {0}/test/scripts {0}/test/suites/config {0}/test/suites/monitor {0}/test/suites/verify {0}/test/templates {0}/test/variables_file',
            'role'   : 'mkdir -p {0}/defaults {0}/files {0}/handlers {0}/meta {0}/tasks {0}/templates {0}/vars ',
        },
        'containers': {
            'ls'      : 'docker ps --filter "label=net.juniper.framework=NITA" --format "table {{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"',
            'versions': 'docker ps -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format "{{ .Name }} - {{ index .Config.Labels \\"net.juniper.image.release\\"}}"',
        },
        'images': {
            'ls'      : 'docker images --filter "label=net.juniper.framework=NITA"',
            'versions': 'docker images -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format "{{ .RepoTags }} - {{ index .Config.Labels \\"net.juniper.image.release\\"}}"',
        },
        'inventory': {
            'create'  : 'docker run -d -p 15984:5984 --name inventory -it couchdb',
            'populate': 'cd couchdb/ ; sh make_couch.sh ; cd ..',
        },
        'ips'  : 'docker ps -q --filter "label=net.juniper.framework=NITA" | xargs docker inspect --format \'{{ .Name }} - {{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\'',
        'stats': 'docker stats --no-stream $(docker ps -q --filter "label=net.juniper.framework=NITA" --format={{.Names}})',
        'jenkins': {
            'jobs': {
                'ls'    : 'docker exec -it jenkins list_jenkins_jobs.py',
                'remove': 'docker exec -it jenkins remove_from_jenkins.py -y {0} {1}',
                'import': "docker run --rm -it --network nita-demo-intro_default --volumes-from jenkins -v $PWD:/var/tmp ps-docker.artifactory.aslab.juniper.net/jenkins:3.3.5 import_jenkins_jobs.sh {0} {1}",
                'export': "docker run --rm -it --network nita-demo-intro_default --volumes-from jenkins -v $PWD:/var/tmp ps-docker.artifactory.aslab.juniper.net/jenkins:3.3.5 export_jenkins_jobs.sh {0} {1}",
            },
            'labels':  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel jenkins """,
            'cli': {
                'jenkins': 'docker exec -it -u jenkins jenkins /bin/bash',
                'root'   : 'docker exec -it -u root jenkins /bin/bash',
            },
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' jenkins',
            'ports'  : 'docker port jenkins',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' jenkins | jq',
            'logs'   : 'docker logs jenkins --tail 200',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart jenkins',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up jenkins -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml stop jenkins',
        },
        'ansible': {
            'run': {
                'noob' : {
                    'console': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ./noob.sh',
                    'gui' :    'curl -X POST http://localhost:8080/job/vDC_NOOB/build',
                },
                'build': {
                    'console': 'docker run --rm --name ansible -e VMM_USER=$VMM_USER --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 ./build.sh',
                    'gui':     'curl -X POST http://localhost:8080/job/vDC_Build/build',
                },
            },
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' ansible | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel ansible """,
            'cli':     'docker run -d --rm --name ansible -e VMM_USER=$VMM_USER -it --volumes-from jenkins -v %s:/project ps-docker.artifactory.aslab.juniper.net/ansible:19.11.1 /bin/sh ; docker attach ansible',
        },
        'test': {
            'run': {
                'common': { 
                    'firewall' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:fw-vdc-001 /project/test/suites/common.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_FW_Common_Tests/build',
                    }, 
                    'switch' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:sw-vdc-001 /project/test/suites/common.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_SW_Common_Tests/build',
                    }, 
                    'router': {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/common.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_RX_Common_Tests/build',
                    },    
                },
                'specific' : 
                    {
                    'firewall' : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:fw-vdc-001 /project/test/suites/firewalls.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_FW_Tests/build',
                        },
                    'switch'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:sw-vdc-001 /project/test/suites/switches.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_SW_Tests/build',
                        },
                    'router'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/routers.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_RX_Tests/build',
                        },
                    'tacacs'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/tacacs.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_TACACS_Tests/build',
                        },
                    'radius'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/radius.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_RADIUS_Tests/build',
                        },
                    'syslog'   : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/syslog.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_SYSLOG_Tests/build',
                        },
                    'dns'      : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/dns.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_DNS_Tests/build',
                        },
                    'ntp'      : {
                        'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/ntp.robot',
                        'gui' :    'curl -X POST http://localhost:8080/job/vDC_NTP_Tests/build',
                        },
                    # 'ospf'     : {
                    #     'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/ospf.robot',
                    #     'gui' :    'curl -X POST http://localhost:8080/job/vDC_OSPF_Tests/build',
                    #     },
                    # 'bgp'      : {
                    #     'console': 'docker run --rm --name test --volumes-from jenkins -v %s:/project -e USER=nita ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 -C ON -p /project/test/t_object.yaml --variable dut:rx-vdc-001 /project/test/suites/bgp.robot',
                    #     'gui' :    'curl -X POST http://localhost:8080/job/vDC_BGP_Tests/build',
                    #     },
                    },                   
                },
            'pull': {
                'static'  : 'python inventory2toby.py --static',
                'dynamic' : 'python inventory2toby.py --dynamic',
                },
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' test | jq',
            'labels':  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel test """,
            'cli':     'docker run -d --rm --name test -h toby --volumes-from jenkins -it -v %s:/project --entrypoint bash ps-docker.artifactory.aslab.juniper.net/toby:3.8.2 ; docker attach test',
        },
    #     'webapp': {
    #         'logs'   : 'docker logs webapp --tail 200',
    #         'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' webapp',
    #         'ports'  : 'docker port webapp',
    #         'volumes': 'docker inspect --format \'{{json .Mounts}}\' webapp | jq',
    #         'labels' :  """containerlabel() { docker inspect -f '
    # {{ range $k, $v := .Config.Labels -}}
    # {{ $k }} = {{ $v }}
    # {{ end -}}' $1 ; } ; containerlabel webapp """,
    #         'cli':     'docker exec -it webapp /bin/bash',
    #     },
        'tacacs': {
            'logs'   : 'docker exec -it tacacs tail -200 /var/log/tacacs.log',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' tacacs',
            'ports'  : 'docker port tacacs',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' tacacs | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel tacacs """,
            'cli':     'docker exec -it tacacs /bin/bash',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart tacacs',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up tacacs -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml stop tacacs',
        },
        'radius': {
            'logs'   : 'docker exec -it radius tail -200 /var/log/freeradius/radius.log',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' radius',
            'ports'  : 'docker port radius',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' radius | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel radius """,
            'cli':     'docker exec -it radius /bin/bash',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart radius',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up radius -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml stop radius',
        },
        'ntp': {
            'logs'   : 'docker logs ntp --tail 200',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' ntp',
            'ports'  : 'docker port ntp',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' ntp | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel ntp """,
            'cli':     'docker exec -it ntp /bin/sh',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart ntp',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up ntp -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml stop ntp',
        },
        'dns': {
            'logs'   : 'docker logs dns --tail 200',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' dns',
            'ports'  : 'docker port dns',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' dns | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel dns """,
            'cli':     'docker exec -it dns /bin/sh',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart dns',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up dns -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml stop dns',
        },
        'rsyslog': {
            'logs'   : 'docker logs rsyslog --tail 200',
            'ip'     : 'docker inspect --format=\'{{range .NetworkSettings.Networks}}   {{.IPAddress}}{{end}}\' rsyslog',
            'ports'  : 'docker port rsyslog',
            'volumes': 'docker inspect --format \'{{json .Mounts}}\' rsyslog | jq',
            'labels' :  """containerlabel() { docker inspect -f '
    {{ range $k, $v := .Config.Labels -}}
    {{ $k }} = {{ $v }}
    {{ end -}}' $1 ; } ; containerlabel rsyslog """,
            'cli':     'docker exec -it rsyslog /bin/sh',
            'restart': 'docker-compose -f nita-core.yml -f nita-caas.yml restart rsyslog',
            'start':   'docker-compose -f nita-core.yml -f nita-caas.yml up rsyslog -d',
            'stop':    'docker-compose -f nita-core.yml -f nita-caas.yml rsyslog dns',
        },
        'license': 'echo "# <*******************\n#\n# Copyright 2019 Juniper Networks, Inc. All rights reserved.\n# Licensed under the Juniper Networks Script Software License (the "License").\n# You may not use this script file except in compliance with the License, which is located at\n# http://www.juniper.net/support/legal/scriptlicense/\n# Unless required by applicable law or otherwise agreed to in writing by the parties, software\n# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#\n# *******************>"',
    },
}

# HELP TREE
HELP = {
    'nita': {
        'cli': {
            'version': 'Shows NITA CLI current version.',
        },
        'setup': {
            'environment': 'Gives the user the option to set up either your virtual DC running on your laptop or VMM environment to run the demo.',
            'all': 'Execute all demo',
        },
        'destroy': {
            'environment': 'Gives the user the option to destroy either your virtual DC running on your laptop or VMM environment to run the demo.',
        },
        'up'  :   'Creates and starts NITA containers (both Core and CaaS).',
        'down':   'Stops and removes NITA containers (both Core and CaaS).',
        'start':  'Starts NITA containers (both Core and CaaS).',
        'stop':   'Stops NITA containers (both Core and CaaS).',
        'status': 'Shows the status of every NITA containers.',
        'demo': {
            'vmm'   : 'Runs the whole NITA demo with a single script on VMM environment. It needs to be run from nita-demo-intro/ folder.',
            'laptop': 'Runs the whole NITA demo with a single script on a laptop environment. It needs to be run from nita-demo-intro/ folder.',
        },
        'new': {
            'project': 'Creates a new NITA project scaffolding.',
            'role'   : 'Creates a new Ansible role scaffolding.',
        },
        'containers': {
            'ls'      : 'Lists all running NITA containers.',
            'versions': 'Lists all running NITA containers versions.',
        },
        'images': {
            'ls'      : 'Lists all NITA images.',
            'versions': 'Displays NITA images versions.',
        },
        'inventory': {
            'create'  : 'Creates a new 3rd-party virtual DC dynamic inventory in a couchDB container.',
            'populate': 'Populates virtual DC dynamic inventory with data related to NITA demo.',
        },
        'ips'  : 'Shows all NITA containers IPs.',
        'stats': 'Displays NITA containers runtime metrics [CPU %, MEM USAGE / LIMIT, MEM %, NET I/O, BLOCK I/O, PIDS].',
        'jenkins': {
            'jobs': {
                'ls'    : 'Lists all Jenkins jobs.',
                'remove': 'Removes Jenkins jobs matched by --regex <REGEX>. Assume "yes" as answer to all prompts and run non-interactively.',
                'import': 'Imports a job from XML config file by --file <FILE> (e.g. file.xml) into Jenkins server.',
                'export': 'Exports an existing job matched by --job <JOB> into XML format from Jenkins server.',
            },
            'labels':  'Returns labels information on jenkins container.',
            'cli': {
                'jenkins': 'Attaches local standard input, output, and error streams to jenkins running container with "jenkins" user.',
                'root'   : 'Attaches local standard input, output, and error streams to jenkins running container with "root" user.',
            },
            'ip'     : 'Returns IPs information on jenkins container.',
            'ports'  : 'Returns mapped ports information on jenkins container.',
            'volumes': 'Returns shared volumes information on jenkins container.',
            'logs'   : 'Fetches the logs of jenkins container.',
            'restart': 'Restarts jenkins container.',
            'start':   'Starts jenkins container.',
            'stop':    'Stops jenkins container.',
        },
        'ansible': {
            'run': {
                'noob' : {
                    'console': 'Runs NOOB process and writes its output to console. -- It does not trigger any Jenkins job! --',
                    'gui' :    'Triggers NOOB Jenkins job.',
                }, 
                'build': {
                    'console': 'Runs BUILD process and writes its output to console. -- It does not trigger any Jenkins job! --',
                    'gui' :    'Triggers BUILD Jenkins job.',
                },
            },
            'volumes': 'Returns shared volumes information on ansible container.',
            'labels' : 'Returns labels information on ansible container.',
            'cli'    : 'Attaches local standard input, output, and error streams to ansible running container.',
        },
        'test': {
            'run': {
                'common': {
                    'firewall': {
                        'console': 'Executes common test suite on firewall and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_FW_Common_Tests Jenkins job.',
                    },
                    'switch'  : {
                        'console': 'Executes common test suite on switch and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_SW_Common_Tests Jenkins job.',
                    },
                    'router'  : {
                        'console': 'Executes common test suite on router and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_RX_Common_Tests Jenkins job.',
                    },
                },
                'specific' : { 
                    'firewall' : {
                        'console': 'Executes specific firewall tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_FW_Tests Jenkins job.',
                    },
                    'switch'   : {
                        'console': 'Executes specific switch tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_SW_Tests Jenkins job.',
                    },
                    'router'   : {
                        'console': 'Executes specific router tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_RX_Tests Jenkins job.',
                    },
                    'tacacs'   : {
                        'console': 'Executes specific TACACS tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_TACACS_Tests Jenkins job.',
                    },
                    'radius'   : {
                        'console': 'Executes specific RADIUS tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_RADIUS_Tests Jenkins job.',
                    },
                    'syslog'   : {
                        'console': 'Executes specific SYSLOG tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_SYSLOG_Tests Jenkins job.',
                    },
                    'dns'      : {
                        'console': 'Executes specific DNS tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_DNS_Tests Jenkins job.',
                    },
                    'ntp'      : {
                        'console': 'Executes specific NTP tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                        'gui' :    'Triggers vDC_NTP_Tests Jenkins job.',
                    },
                    # 'ospf'     : {
                    #     'console': 'Executes specific OSPF tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                    #     'gui' :    'Triggers vDC_OSPF_Tests Jenkins job.',
                    # },
                    # 'bgp'      : {
                    #     'console': 'Executes specific BGP tests and writes its output to console. -- It does not trigger any Jenkins job! --',
                    #     'gui' :    'Triggers vDC_BGP_Tests Jenkins job.',
                    # },
                },
            },
            'pull': {
                'static' : 'Creates topology object from static inventory.',
                'dynamic': 'Creates topology object from dynamic inventory.',
            },
            'volumes': 'Returns shared volumes information on test container.',
            'labels' : 'Returns labels information on test container.',
            'cli'    : 'Attaches local standard input, output, and error streams to test running container.',
        },
        # 'webapp': {
        #     'logs'   : 'Fetches the logs of webapp container.',
        #     'ip'     : 'Returns IPs information on webapp container.',
        #     'ports'  : 'Returns mapped ports information on webapp container.',
        #     'volumes': 'Returns shared volumes information on webapp container.',
        #     'labels' : 'Returns labels information on webapp container.',
        #     'cli'    : 'Attaches local standard input, output, and error streams to webapp running container.',
        # },
        'tacacs': {
            'logs'   : 'Fetches the logs of tacacs container.',
            'ip'     : 'Returns IPs information on tacacs container.',
            'ports'  : 'Returns mapped ports information on tacacs container.',
            'volumes': 'Returns shared volumes information on tacacs container.',
            'labels' : 'Returns labels information on tacacs container.',
            'cli'    : 'Attaches local standard input, output, and error streams to tacacs running container.',
            'restart': 'Restarts tacacs container.',
            'start':   'Starts tacacs container.',
            'stop':    'Stops tacacs container.',
        },
        'radius': {
            'logs'   : 'Fetches the logs of radius container.',
            'ip'     : 'Returns IPs information on radius container.',
            'ports'  : 'Returns mapped ports information on radius container.',
            'volumes': 'Returns shared volumes information on radius container.',
            'labels' : 'Returns labels information on radius container.',
            'cli'    : 'Attaches local standard input, output, and error streams to radius running container.',
            'restart': 'Restarts radius container.',
            'start':   'Starts radius container.',
            'stop':    'Stops radius container.',
        },
        'ntp': {
            'logs'   : 'Fetches the logs of ntp container.',
            'ip'     : 'Returns IPs information on ntp container.',
            'ports'  : 'Returns mapped ports information on ntp container.',
            'volumes': 'Returns shared volumes information on ntp container.',
            'labels' : 'Returns labels information on ntp container.',
            'cli'    : 'Attaches local standard input, output, and error streams to ntp running container.',
            'restart': 'Restarts ntp container.',
            'start':   'Starts ntp container.',
            'stop':    'Stops ntp container.',
        },
        'dns': {
            'logs'   : 'Fetches the logs of dns container.',
            'ip'     : 'Returns IPs information on dns container.',
            'ports'  : 'Returns mapped ports information on dns container.',
            'volumes': 'Returns shared volumes information on dns container.',
            'labels' : 'Returns labels information on dns container.',
            'cli'    : 'Attaches local standard input, output, and error streams to dns running container.',
            'restart': 'Restarts dns container.',
            'start':   'Starts dns container.',
            'stop':    'Stops dns container.',
        },
        'rsyslog': {
            'logs'   : 'Fetches the logs of rsyslog container.',
            'ip'     : 'Returns IPs information on rsyslog container.',
            'ports'  : 'Returns mapped ports information on rsyslog container.',
            'volumes': 'Returns shared volumes information on rsyslog container.',
            'labels' : 'Returns labels information on rsyslog container.',
            'cli'    : 'Attaches local standard input, output, and error streams to rsyslog running container.',
            'restart': 'Restarts rsyslog container.',
            'start':   'Starts rsyslog container.',
            'stop':    'Stops rsyslog container.',
        },
        'license': 'Displays the NITA License.',
    },
}

if __name__ == '__main__':
    cli.main(COMMANDS, HELP)
